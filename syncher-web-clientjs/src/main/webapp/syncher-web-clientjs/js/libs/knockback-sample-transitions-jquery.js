/*
  knockback-sample-transitions-jquery.js 0.1.1
  (c) 2011, 2012 Kevin Malakoff - http://kmalakoff.github.com/knockback/
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Dependencies: Knockout.js, Backbone.js, and Underscore.js.
*/
(function() {
  return (function(factory) {
    // AMD
    if (typeof define === 'function' && define.amd) {
      return define('knockback-sample-transitions-jquery', factory);
    }
    // CommonJS/NodeJS or No Loader
    else {
      return factory.call(this);
    }
  })(function() {// Generated by CoffeeScript 1.3.3
var kb, wrapAnimCallback, _anim_fn;

try {
  this.kb = kb = !this.kb && (typeof require !== 'undefined') ? require('knockback') : this.kb;
} catch (e) {
  ({});
}

this.kb || (this.kb = kb || (kb = {}));

kb.transistions || (kb.transistions = {});

if (this.Zepto) {
  wrapAnimCallback = function(el, properties, callback) {
    el.__kb_zepto_endEvent = typeof properties === 'string' ? $.fx.animationEnd : $.fx.transitionEnd;
    el.__kb_zepto_callback = function() {
      if (!el.__kb_zepto_endEvent) {
        return;
      }
      delete el.__kb_zepto_endEvent;
      delete el.__kb_zepto_callback;
      return !callback || callback.call(this);
    };
    return el.__kb_zepto_callback;
  };
  _anim_fn = $.fn.anim;
  $.fn.anim = function(properties, duration, ease, callback) {
    var el, replacement_callback, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      el = this[_i];
      replacement_callback = wrapAnimCallback(el, properties, callback);
    }
    _anim_fn.call(this, properties, duration, ease, replacement_callback);
    return this;
  };
  $.fn.stop = function() {
    var el, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      el = this[_i];
      if (el.__kb_zepto_endEvent) {
        $(el).trigger(el.__kb_zepto_endEvent);
      }
    }
    return this;
  };
}

kb.transistions.CoverVertical = function(info, options) {
  var $container_el, $to_el, container_height, duration, initial_state;
  initial_state = new kb.TransitionSavedState(info, {
    to_el: ['min-height', 'bottom'],
    container_el: ['overflow']
  });
  $to_el = $(info.to_el);
  $container_el = $(info.container_el);
  container_height = $container_el.height();
  duration = 'duration' in options ? options.duration : 500;
  this.cancel = function() {
    return $to_el.stop();
  };
  this.callback = function() {
    initial_state.restore();
    return info.callback();
  };
  this.start = function() {
    if (!info.from_el) {
      info.callback();
      return;
    }
    $to_el.addClass('on-top');
    $to_el.css({
      'min-height': container_height
    });
    $container_el.css({
      'overflow': 'hidden'
    });
    if (options.forward) {
      $to_el.css({
        bottom: -container_height
      });
      return $to_el.animate({
        bottom: '0px'
      }, duration, 'linear', this.callback);
    } else {
      $to_el.css({
        bottom: '0px'
      });
      return $to_el.animate({
        bottom: -container_height
      }, duration, 'linear', this.callback);
    }
  };
  return this;
};

kb.transistions.FadeIn = function(info, options) {
  var $container_el, $to_el, initial_state;
  initial_state = new kb.TransitionSavedState(info, {
    to_el: ['min-height', 'opacity'],
    container_el: ['overflow']
  });
  $to_el = $(info.to_el);
  $container_el = $(info.container_el);
  this.cancel = function() {
    return $to_el.stop();
  };
  this.callback = function() {
    initial_state.restore();
    return info.callback();
  };
  this.start = function() {
    var duration;
    $to_el.addClass('on-top');
    $to_el.css({
      'min-height': $container_el.height()
    });
    $container_el.css({
      'overflow': 'hidden'
    });
    duration = 'duration' in options ? options.duration : 500;
    if (options.forward) {
      $to_el.css({
        'opacity': 0
      });
      return $to_el.animate({
        'opacity': 1
      }, 1000, 'swing', this.callback);
    } else {
      $to_el.css({
        'opacity': 1
      });
      return $to_el.animate({
        'opacity': 0
      }, 1000, 'swing', this.callback);
    }
  };
  return this;
};

kb.transistions.NavigationSlide = function(info, options) {
  var $container_el, $from_el, $to_el, duration, initial_state, width;
  initial_state = new kb.TransitionSavedState(info, {
    to_el: ['left'],
    from_el: ['left'],
    container_el: ['overflow']
  });
  $from_el = $(info.from_el);
  $to_el = $(info.to_el);
  $container_el = $(info.container_el);
  width = $container_el.width();
  duration = 'duration' in options ? options.duration : 500;
  this.cancel = function() {
    return $to_el.stop();
  };
  this.callback = function() {
    initial_state.restore();
    return info.callback();
  };
  this.start = function() {
    if (!info.from_el) {
      info.callback();
      return;
    }
    if (options.forward) {
      $from_el.css({
        left: '0px'
      });
      $from_el.animate({
        left: -width
      }, duration, 'linear');
      $to_el.css({
        left: width
      });
      return $to_el.animate({
        left: '0px'
      }, duration, 'linear', this.callback);
    } else {
      $from_el.css({
        left: -width
      });
      $from_el.animate({
        left: '0px'
      }, duration, 'linear');
      $to_el.css({
        left: '0px'
      });
      return $to_el.animate({
        left: width
      }, duration, 'linear', this.callback);
    }
  };
  return this;
};
; return kb;});
}).call(this);